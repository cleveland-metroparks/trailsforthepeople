<?php $this->page_title = 'Database Load'; ?>

<p>Unlike the other documents, this one is largely intended as copy-and-paste database code for PostgreSQL. As such, narrative will usually be in the form of double-dash comments so as not to interrupt the flow of SQL.</p>

<h2>Initial Setup: PostGIS, pgRouting, Some Stored Procedures</h2>

<p>These steps won't be necessary again, but are worth recording for future projects, especially where they pertain to PostGIS 2 compatibility or pgRouting bugs.</p>

<pre>
-- PostgreSQL 9 has tighter default permissions, not even allowing SELECT unless you explicitly GRANT it
-- So let's explicitly hand out SELECT access to everybody, cuz we know that won't go wrong for us

ALTER DEFAULT PRIVILEGES IN SCHEMA public
    GRANT SELECT ON TABLES
    TO public;

ALTER DEFAULT PRIVILEGES IN SCHEMA public
    GRANT SELECT ON SEQUENCES
    TO public;


-- Install PostGIS and PgRouting
-- For the most part PgRouting works fine with PostGIS 2.0 but I did need to fix some function names as noted below.
--
-- Changes to routing_core_wrappers.sql
-- * replace &quot;length::double precision as cost&quot; with &quot;cost&quot;; the cost field is now required but we can weight routes by something other than length
-- * fixed numerous references to X() and Y() and SRID() and SETSRID() and STARTPOINT() and ENDPOINT() to use the ST_* versions
-- Changes to routing_topology.sql
-- * assign_vertex_id() call to addGeometryColumn() now uses 3 dimensions instead of 2

\i /usr/share/postgresql/9.1/contrib/postgis-2.0/postgis.sql
\i /usr/share/postgresql/9.1/contrib/postgis-2.0/spatial_ref_sys.sql
\i /usr/share/postlbs/routing_core.sql
\i /usr/share/postlbs/routing_core_wrappers.sql
\i /usr/share/postlbs/routing_tsp.sql
\i /usr/share/postlbs/routing_tsp_wrappers.sql
\i /usr/share/postlbs/routing_dd.sql
\i /usr/share/postlbs/routing_dd_wrappers.sql
\i /usr/share/postlbs/routing_topology.sql



-- Two functions to update the Loops table's &quot;reservations&quot; field
-- update_loop_reservations(int4) takes a 'id' integer, and recalculates the reservations for that one Loop record
-- update_loops_reservations() iterates over the whole Loops table and runs update_loop_reservations(int4) for each record.
-- The single form is used in the admin UI after saving a Loop. The full-table version may be used manually after some large-scale bulk updates.
DROP FUNCTION IF EXISTS update_loop_reservations(int4);
CREATE OR REPLACE FUNCTION update_loop_reservations(int4)
RETURNS text AS $$
DECLARE
    targetid ALIAS FOR $1;
    thisloop record;
    thisres  record;
    reslist text;
BEGIN
    -- fetch the loop or bail
    SELECT INTO thisloop * FROM loops WHERE id=targetid;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Record not found';
    END IF;

    -- delete the old list
    DELETE FROM loops_reservations WHERE loopid=targetid;

    -- go over the reservation records which intersect this geometry, insert a reservation entry for each
    reslist = '';
    FOR thisres IN
        SELECT res FROM reservation_boundaries_public_private_cm_dissolved WHERE ST_INTERSECTS(geom, thisloop.geom)
    LOOP
        INSERT INTO loops_reservations (loopid,reservation) VALUES (thisloop.id,thisres.res);
    END LOOP;

    RETURN 'Done';
END;
$$ LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS update_loops_reservations();
CREATE OR REPLACE FUNCTION update_loops_reservations()
RETURNS text AS $$
DECLARE
    thisloop record;
    thisres  record;
    current integer;
    howmany integer;
    reslist text;
BEGIN
    howmany = (SELECT COUNT(*) AS howmany FROM loops);
    current = 0;

    FOR thisloop IN
        SELECT * FROM loops
    LOOP
        current = current + 1;
        RAISE NOTICE '[% / %] %', current, howmany, thisloop.name;

        PERFORM update_loop_reservations(thisloop.id);

    END LOOP;

    RETURN 'DONE';
END;
$$ LANGUAGE plpgsql;


-- This stored procedure examines the routing_trails table and populates the "links" field
-- This is used for route debugging, allowing us to find segments (edges) which do not have an expected number of connections
-- 0 would indicate a completely isolated segment, 1 indicates a segment that is a dead end, 2 is a segment within a straight line route, ...
DROP FUNCTION IF EXISTS update_routing_trails_link_count();
CREATE OR REPLACE FUNCTION update_routing_trails_link_count()
RETURNS text AS $$
DECLARE
    row record;
    current integer;
    howmany integer;
BEGIN
    RAISE NOTICE 'Zeroing out existing records. This takes a moment.';
    UPDATE routing_trails SET links=0;

    howmany = (SELECT max(gid) FROM routing_trails);
    current = 0;
    FOR row IN
        SELECT source FROM routing_trails
    LOOP
        current = current + 1;
        IF current % 1000 = 0 THEN
            RAISE NOTICE 'Progress: % of %', current, howmany;
        END IF;
        UPDATE routing_trails SET links=links+1 WHERE source=row.source OR target=row.source;
    END LOOP; 

    RETURN 'Updated ' || current || ' records';
END;
$$ LANGUAGE plpgsql;




-- This set of stored procedures will examine the Loops (loops), Trails (trails_fixed), and Routing (routing_trails) tables
-- and tag them as closed=true if they intersect any of the Trailclosures (trail_closures) line features
-- update_trail_closures() runs this for all of those tables, and is simply a wrapper over the individual procedures which are appropriately named
DROP FUNCTION IF EXISTS update_trail_closures();
CREATE OR REPLACE FUNCTION update_trail_closures()
RETURNS text AS $$
DECLARE
    row record;
    num_rows integer default 0;
BEGIN
    RAISE NOTICE 'Re-opening Trails.';
    UPDATE trails_fixed SET closed=NULL WHERE closed IS NOT NULL;
    RAISE NOTICE 'Re-opening Loops.';
    UPDATE loops SET closed=NULL WHERE closed IS NOT NULL;
    RAISE NOTICE 'Re-opening Routing.';
    UPDATE routing_trails SET closed=NULL WHERE closed IS NOT NULL;

    FOR row IN
        SELECT name, geom AS closed_geom FROM trail_closures
    LOOP
        RAISE NOTICE '%', row.name;

        UPDATE trails_fixed SET closed=true WHERE ST_DWITHIN(geom,row.closed_geom,10);
        GET DIAGNOSTICS num_rows = ROW_COUNT;
        RAISE NOTICE '    Tagged % Trails.', num_rows;

        UPDATE loops SET closed=true WHERE ST_DWITHIN(geom,row.closed_geom,10);
        GET DIAGNOSTICS num_rows = ROW_COUNT;
        RAISE NOTICE '    Tagged % Loops.', num_rows;

        UPDATE routing_trails SET closed=true WHERE ST_DWITHIN(the_geom,row.closed_geom,10);
        GET DIAGNOSTICS num_rows = ROW_COUNT;
        RAISE NOTICE '    Tagged % routing segments.', num_rows;
    END LOOP; 

    RETURN 'Done';
END;
$$ LANGUAGE plpgsql;
</pre>



<h2>Loading Data</h2>

<p>
Importing data is done via shp2pgsql, like the examples below. For the trails data ONLY, use the -t flag to indicate that this is a 3D dataset.
<br/>
<code>shp2pgsql -W LATIN1 -d -i -s 3734 cm_use_areas.shp cm_use_areas | psql -U postgres path</code><br/>
<code>shp2pgsql -W LATIN1 -d -i -s 3734 cm_dem_10_too_steep_Intersec.shp routing_barriers | psql -U postgres path</code><br/>
<code>shp2pgsql -W LATIN1 -d -i -s 3734 -t 3DZ cm_trails.shp cm_trails | psql -U postgres path</code><br/>
<code>shp2pgsql -W LATIN1 -d -i -s 3734 reservations.shp reservation_boundaries_public_private_cm_dissolved | psql -U postgres path</code><br/>
<code>shp2pgsql -W LATIN1 -d -i -s 3734 cm_destination_pts.shp driving_destinations | psql -U postgres path</code><br/>
</p>

<p>The database password can be found in <code>application/config/database.php</code></p>

<h2>Postprocessing A Data Load</h2>

<pre>
-- After the datasets are uploaded, add the Lat/Lng of its centroid, and its W/S/E/N bounding box, in WGS84.
-- This is used extensively for zooming the map, and for client-side distance calculation.
-- For cm_trails, also add the geometry's length, which is used later for calculating a human-readable length.

CREATE INDEX cm_trails_geom ON cm_trails USING GIST (geom);

ALTER TABLE cm_trails ADD COLUMN length float;
UPDATE cm_trails SET length = ST_LENGTH(geom);

alter table cm_trails add column lat float;
alter table cm_trails add column lng float;
alter table cm_trails add column boxw float;
alter table cm_trails add column boxs float;
alter table cm_trails add column boxe float;
alter table cm_trails add column boxn float;

update cm_trails set lat=ST_Y(ST_CENTROID(ST_TRANSFORM(geom,4326)));
update cm_trails set lng=ST_X(ST_CENTROID(ST_TRANSFORM(geom,4326)));
update cm_trails set boxw=ST_XMIN(ST_TRANSFORM(geom,4326));
update cm_trails set boxe=ST_XMAX(ST_TRANSFORM(geom,4326));
update cm_trails set boxs=ST_YMIN(ST_TRANSFORM(geom,4326));
update cm_trails set boxn=ST_YMAX(ST_TRANSFORM(geom,4326));

alter table cm_buildings add column lat float;
alter table cm_buildings add column lng float;
alter table cm_buildings add column lat_dms varchar(15);
alter table cm_buildings add column lng_dms varchar(15);
alter table cm_buildings add column boxw float;
alter table cm_buildings add column boxs float;
alter table cm_buildings add column boxe float;
alter table cm_buildings add column boxn float;

alter table cm_buildings rename column site_locat to site_location;
alter table cm_buildings rename column square_foo to square_footage;
alter table cm_buildings rename column street_add to street_address;

update cm_buildings set lat=ST_Y(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update cm_buildings set lng=ST_X(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update cm_buildings set lat_dms='N ' || TRUNC(lat) || ' ' || ROUND((60*(lat-TRUNC(lat)))::numeric,3);
update cm_buildings set lng_dms='W ' || TRUNC(ABS(lng)) || ' ' || ROUND((60*(ABS(lng)-TRUNC(ABS(lng))))::numeric,3);
update cm_buildings set boxw=ST_XMIN(ST_TRANSFORM(geom,4326));
update cm_buildings set boxe=ST_XMAX(ST_TRANSFORM(geom,4326));
update cm_buildings set boxs=ST_YMIN(ST_TRANSFORM(geom,4326));
update cm_buildings set boxn=ST_YMAX(ST_TRANSFORM(geom,4326));

alter table cm_buildings add column lat_driving float;
alter table cm_buildings add column lng_driving float;
update cm_buildings set lat_driving=lat;
update cm_buildings set lng_driving=lng;

alter table reservation_boundaries_public_private_cm_dissolved add column lat float;
alter table reservation_boundaries_public_private_cm_dissolved add column lng float;
alter table reservation_boundaries_public_private_cm_dissolved add column boxw float;
alter table reservation_boundaries_public_private_cm_dissolved add column boxs float;
alter table reservation_boundaries_public_private_cm_dissolved add column boxe float;
alter table reservation_boundaries_public_private_cm_dissolved add column boxn float;

update reservation_boundaries_public_private_cm_dissolved set lat=ST_Y(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update reservation_boundaries_public_private_cm_dissolved set lng=ST_X(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update reservation_boundaries_public_private_cm_dissolved set boxw=ST_XMIN(ST_TRANSFORM(geom,4326));
update reservation_boundaries_public_private_cm_dissolved set boxe=ST_XMAX(ST_TRANSFORM(geom,4326));
update reservation_boundaries_public_private_cm_dissolved set boxs=ST_YMIN(ST_TRANSFORM(geom,4326));
update reservation_boundaries_public_private_cm_dissolved set boxn=ST_YMAX(ST_TRANSFORM(geom,4326));

alter table reservation_boundaries_public_private_cm_dissolved add column lat_driving float;
alter table reservation_boundaries_public_private_cm_dissolved add column lng_driving float;
update reservation_boundaries_public_private_cm_dissolved set lat_driving=lat;
update reservation_boundaries_public_private_cm_dissolved set lng_driving=lng;

alter table reservation_boundaries_public_private_cm_dissolved add column wkt text;
update reservation_boundaries_public_private_cm_dissolved set wkt=ST_ASTEXT(ST_TRANSFORM(geom,4326));

alter table cm_use_areas add column lat float;
alter table cm_use_areas add column lng float;
alter table cm_use_areas add column lat_dms varchar(15);
alter table cm_use_areas add column lng_dms varchar(15);
alter table cm_use_areas add column boxw float;
alter table cm_use_areas add column boxs float;
alter table cm_use_areas add column boxe float;
alter table cm_use_areas add column boxn float;

update cm_use_areas set lat=ST_Y(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update cm_use_areas set lng=ST_X(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update cm_use_areas set lat_dms='N ' || TRUNC(lat) || ' ' || ROUND((60*(lat-TRUNC(lat)))::numeric,3);
update cm_use_areas set lng_dms='W ' || TRUNC(ABS(lng)) || ' ' || ROUND((60*(ABS(lng)-TRUNC(ABS(lng))))::numeric,3);
update cm_use_areas set boxw=ST_XMIN(ST_TRANSFORM(geom,4326));
update cm_use_areas set boxe=ST_XMAX(ST_TRANSFORM(geom,4326));
update cm_use_areas set boxs=ST_YMIN(ST_TRANSFORM(geom,4326));
update cm_use_areas set boxn=ST_YMAX(ST_TRANSFORM(geom,4326));

alter table cm_use_areas add column lat_driving float;
alter table cm_use_areas add column lng_driving float;
update cm_use_areas set lat_driving=lat;
update cm_use_areas set lng_driving=lng;

-- the Use Areas table (cm_use_areas) is polygons, but we really want them cast to points so GeoServer and PostGIS see eye-to-eye
-- use the above-calculated lat,lng and drop the polygon geometry entirely, to form a super simple point layer
-- (there was a buggy behavior, where GeoServer would draw the icon someplace other than where PostGIS would pick a lat,lng )
ALTER TABLE cm_use_areas DROP COLUMN geom;
ALTER TABLE cm_use_areas ADD COLUMN geom geometry(POINT,3734);
UPDATE cm_use_areas SET geom=ST_Transform(ST_SetSRID(ST_MakePoint(lng,lat),4326),3734);

GRANT UPDATE ON reservation_boundaries_public_private_cm_dissolved TO trails; -- so we can load activities from contained Use Areas, see updating_data doc for details
GRANT UPDATE ON trails_fixed TO trails; -- so we can run the XLSX thingy, see updating_data doc for details
GRANT UPDATE ON cm_use_areas TO trails; -- so we can run the XLSX thingy, see updating_data doc for details
GRANT UPDATE ON cm_buildings TO trails; -- so we can run the XLSX thingy, see updating_data doc for details



-- The driving_destinations has alternate driving lat/lng for some features
-- Load it via shp2pgsql above, then extract it into normal lat/lng here

alter table driving_destinations rename column res_id TO reservation_id;

alter table driving_destinations add column lat float;
alter table driving_destinations add column lng float;

update driving_destinations set lat=ST_Y(ST_TRANSFORM(ST_PointOnSurface(geom),4326));
update driving_destinations set lng=ST_X(ST_TRANSFORM(ST_PointOnSurface(geom),4326));



-- the driving_destinations content is copied into the Use Areas and the Trails
-- later on by processes which you will be running anyway:
-- http://maps.clemetparks.com/static/import/Use_Areas_Descriptions.php
-- http://maps.clemetparks.com/static/import/Aggregate_Trails.php
-- http://maps.clemetparks.com/static/import/Buildings.php


-- the Reservations table lacks an "activities" field, listing the activities that are available in contained Use Areas
-- create it, and let it be filled in by the Use Areas CMS aggregation thing, see updating_data doc for details

alter table reservation_boundaries_public_private_cm_dissolved rename column res_id TO reservation_id;

alter table reservation_boundaries_public_private_cm_dissolved add column activities text;


-- the Reservations table lacks a "link" field, indicating an external URl for more info about each reservation
-- create it and populate it

ALTER TABLE reservation_boundaries_public_private_cm_dissolved ADD COLUMN link varchar(100);

UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Bedford-Reservation-1.aspx' WHERE res='Bedford Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Big-Creek-Reservation-2.aspx' WHERE res='Big Creek Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Bradley-Woods-Reservation-3.aspx' WHERE res='Bradley Woods Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Brecksville-Reservation-4.aspx' WHERE res='Brecksville Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Brookside-Reservation-5.aspx' WHERE res='Brookside Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Euclid-Creek-Reservation-6.aspx' WHERE res='Euclid Creek Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Garfield-Park-Reservation-7.aspx' WHERE res='Garfield Park Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Hinckley-Reservation-8.aspx' WHERE res='Hinckley Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Huntington-Reservation-9.aspx' WHERE res='Huntington Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Mill-Stream-Run-Reservation-10.aspx' WHERE res='Mill Stream Run Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/North-Chagrin-Reservation-11.aspx' WHERE res='North Chagrin Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Ohio-Erie-Canal-Reservation-12.aspx' WHERE res='Ohio & Erie Canal Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Rocky-River-Reservation-13.aspx' WHERE res='Rocky River Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/South-Chagrin-Reservation-14.aspx' WHERE res='South Chagrin Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Washington-Reservation-15.aspx' WHERE res='Washington Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/West-Creek-Reservation-16.aspx' WHERE res='West Creek Reservation';
UPDATE reservation_boundaries_public_private_cm_dissolved SET link='http://www.clevelandmetroparks.com/Main/Reservations-Partners/Lakefront-Reservation-18.aspx' WHERE res='Lakefront Reservation';

-- The Use Areas table (cm_use_areas) has the wrong field names
-- for the Use Areas' title and for the reservation, and the wrong name for Brookside Reservation and Zoo
-- and is missing a few fields which we'll import later from the XLSX

ALTER TABLE cm_use_areas RENAME COLUMN res TO reservation;
--UPDATE cm_use_areas set reservation='Brookside Reservation and Zoo' WHERE reservation='Brookside Reservation';
ALTER TABLE cm_use_areas RENAME COLUMN location TO use_area;
ALTER TABLE cm_use_areas ADD COLUMN link varchar(1000);
ALTER TABLE cm_use_areas ADD COLUMN cal_link varchar(1000);
ALTER TABLE cm_use_areas ADD COLUMN image_url varchar(1000);
ALTER TABLE cm_use_areas ADD COLUMN description TEXT;
ALTER TABLE cm_use_areas ADD COLUMN dest_id INTEGER;

-- The Use Areas table (cm_use_areas) needs the various combinations of activities distilled into
-- a choice of icons. There may be combinations and surprises, but that's why we have the NULL check at the end.
ALTER TABLE cm_use_areas ADD COLUMN icon VARCHAR(50);
UPDATE cm_use_areas SET icon='archery' WHERE activity='Archery' AND show='1';
UPDATE cm_use_areas SET icon='archery' WHERE activity='Archery; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='beach' WHERE activity='Beach' AND show='1';
UPDATE cm_use_areas SET icon='swim' WHERE activity='Swimming; Beach' AND show='1';
UPDATE cm_use_areas SET icon='boat' WHERE activity='Boating' AND show='1';
UPDATE cm_use_areas SET icon='boat' WHERE activity='Boating; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='fish_boat' WHERE activity='Boating; Fishing & Ice Fishing; Swimming; Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='fish_boat' WHERE activity='Boating; Fishing & Ice Fishing; Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='fish_boat' WHERE activity='Boating; Fishing & Ice Fishing; Viewing Wildlife; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History; Sledding & Tobogganing' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History; Sledding & Tobogganing; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History; Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History; Viewing Wildlife; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Drinking Fountain' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Drinking Fountain; Exploring Culture & History' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Drinking Fountain; Exploring Culture & History; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='history' WHERE activity='Exploring Culture & History; Drinking Fountain; Facilities; Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='nature' WHERE activity='Exploring Nature' AND show='1';
UPDATE cm_use_areas SET icon='nature_geology' WHERE activity='Exploring Nature; Geologic Feature' AND show='1';
UPDATE cm_use_areas SET icon='fish' WHERE activity='Fishing & Ice Fishing' AND show='1';
UPDATE cm_use_areas SET icon='fish' WHERE activity='Geologic Feature; Fishing & Ice Fishing' AND show='1';
UPDATE cm_use_areas SET icon='fish' WHERE activity='Fishing & Ice Fishing; Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='geology' WHERE activity='Geologic Feature' AND show='1';
UPDATE cm_use_areas SET icon='golf' WHERE activity='Golfing' AND show='1';
UPDATE cm_use_areas SET icon='horse' WHERE activity='Horseback Riding' AND show='1';
UPDATE cm_use_areas SET icon='horse' WHERE activity='Horseback Riding; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='horse' WHERE activity='Drinking Fountain; Horseback Riding; Facilities' AND show='1';
UPDATE cm_use_areas SET icon='kayak' WHERE activity='Kayaking' AND show='1';
UPDATE cm_use_areas SET icon='picnic' WHERE activity='Picnicking' AND show='1';
UPDATE cm_use_areas SET icon='picnic' WHERE activity='Drinking Fountain; Picnicking' AND show='1';
UPDATE cm_use_areas SET icon='picnic_play' WHERE activity='Picnicking; Play Areas' AND show='1';
UPDATE cm_use_areas SET icon='picnic_play' WHERE activity='Picnicking; Play Areas' AND show='1';
UPDATE cm_use_areas SET icon='picnic_play' WHERE activity='Drinking Fountain; Picnicking; Play Areas' AND show='1';
UPDATE cm_use_areas SET icon='picnic_sled' WHERE activity='Picnicking; Sledding & Tobogganing' AND show='1';
UPDATE cm_use_areas SET icon='play' WHERE activity='Play Area' AND show='1';
UPDATE cm_use_areas SET icon='play' WHERE activity='Play Areas' AND show='1';
UPDATE cm_use_areas SET icon='play' WHERE activity='Drinking Fountain; Play Areas' AND show='1';
UPDATE cm_use_areas SET icon='sled' WHERE activity='Sledding & Tobogganing' AND show='1';
UPDATE cm_use_areas SET icon='swim' WHERE activity='Swimming' AND show='1';
UPDATE cm_use_areas SET icon='wildlife' WHERE activity='Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='picnic' WHERE activity='Picnicking; Viewing Wildlife' AND show='1';
UPDATE cm_use_areas SET icon='restroom' WHERE activity='Restroom' AND show='1';
UPDATE cm_use_areas SET icon='restroom' WHERE activity='Drinking Fountain; Restroom' AND show='1';
UPDATE cm_use_areas SET icon='restroom' WHERE activity='Food; Restroom' AND show='1';
UPDATE cm_use_areas SET icon='reservable' WHERE park_spots='Reserved';
SELECT DISTINCT activity FROM cm_use_areas WHERE icon IS NULL ORDER BY activity;

-- load the descriptions into cm_use_areas
-- do the import at http://maps.clemetparks.com/static/import/Use_Areas_Descriptions.php

-- The Buildings table uses char() instead of varchar() fields and adds extra spaces
-- These make text matching difficult, and adds hundreds of trim() calls
ALTER TABLE cm_buildings RENAME COLUMN name TO old_name;
ALTER TABLE cm_buildings ADD COLUMN name varchar(100);
UPDATE cm_buildings SET name=TRIM(both FROM old_name);
ALTER TABLE cm_buildings DROP COLUMN old_name;


-- The Reservations table uses char() instead of varchar() fields and adds extra spaces
-- These make text matching difficult, and adds hundreds of trim() calls
ALTER TABLE reservation_boundaries_public_private_cm_dissolved RENAME COLUMN res TO old_res;
ALTER TABLE reservation_boundaries_public_private_cm_dissolved ADD COLUMN res varchar(80);
UPDATE reservation_boundaries_public_private_cm_dissolved SET res=TRIM(both FROM old_res);
ALTER TABLE reservation_boundaries_public_private_cm_dissolved DROP COLUMN old_res;

-- Add the tsvector fields for keyword full-text searching.
-- This is used by Ajax::keyword() via each model's searchByKeywords() method
-- A few of the tables have some areas with names that the TS mangles, notably acronyms and initials, so we patch around those

ALTER TABLE reservation_boundaries_public_private_cm_dissolved ADD COLUMN search tsvector;
UPDATE reservation_boundaries_public_private_cm_dissolved  SET search=to_tsvector(res);
CREATE INDEX reservation_boundaries_public_private_cm_dissolved_search ON reservation_boundaries_public_private_cm_dissolved USING GIN (search);

ALTER TABLE cm_use_areas ADD COLUMN search tsvector;
UPDATE cm_use_areas SET search=to_tsvector(coalesce(use_area,'') || ' ' || replace(coalesce(use_area,''),'.',' ') || ' ' || replace(coalesce(use_area,''),'.','') || ' ' || replace(coalesce(use_area,''),'-',' ') || ' ' || replace(coalesce(use_area,''),'-','') || ' ' || coalesce(activity,'') );
CREATE INDEX cm_use_areas_search ON cm_use_areas USING GIN (search);

ALTER TABLE cm_buildings ADD COLUMN search tsvector;
UPDATE cm_buildings SET search=to_tsvector(coalesce(name,'') || ' ' || replace(coalesce(name,''),'.',' ') || ' ' || replace(coalesce(name,''),'.','') || ' ' || replace(coalesce(name,''),'-',' ') || ' ' || replace(coalesce(name,''),'-','') || ' ' || coalesce(site_location,'') )WHERE clickable = 'Yes';
CREATE INDEX cm_buildings_search ON cm_buildings USING GIN (search);

ALTER TABLE cm_trails ADD COLUMN search tsvector;
UPDATE cm_trails SET search=to_tsvector( coalesce(label_name,'') );
CREATE INDEX cm_trails_search ON cm_trails USING GIN (search);



-- Data fixes for the trails: Paved vs Unpaved, allow Hike to cross roads, add mean elevation to each trail

-- for routing preferences, we need to know whether a trail is paved (paved=Yes) or natural (paved=No)
-- The following sets this based on the "surfacetyp" and may need adjustments with each new revision of the data,
-- to account for typos, new types, etc.
-- Some types are left intentionally null so they fit into both categories, notably bridges and boardwalks

ALTER TABLE cm_trails ADD COLUMN paved varchar(3);
UPDATE cm_trails SET paved='No';
UPDATE cm_trails SET paved='Yes' WHERE pri_use IN ('All Purpose Trail','APT','Road','Parking');

-- Hiking is too restricted; a hiker can't even cross a street.
-- This accounts for that, by presuming that any bike-friendly street also has a sidewalk.

UPDATE cm_trails SET hike='Yes' where pri_use='Road' AND bike='Yes';

-- Mountain Biking

ALTER TABLE cm_trails ADD COLUMN mtnbike varchar(5);
UPDATE cm_trails SET mtnbike='No';

UPDATE cm_trails SET mtnbike='Yes', bike='No', one_way=NULL WHERE
    ( for_show='Yes' AND res LIKE '%Mill Stream%' AND label_name LIKE '%Red%' )
    OR
    ( for_show='Yes' AND res  LIKE '%Mill Stream%' AND label_name LIKE '%Yellow%' )
    OR
    ( for_show='Yes' AND res ='Ohio & Erie Canal Reservation'AND label_name LIKE '%Ohio & Erie Canal Reservation Mountain Bike Trail%' )
;

-- Add elevation data to the cm_trails so it can be click-queried
-- Less accurate than what's in the smaller chunks of the routing table, but it's what there is for click-queries
ALTER TABLE cm_trails ADD COLUMN elevation integer;
UPDATE cm_trails SET elevation=ROUND( ST_Z(ST_StartPoint(ST_GeometryN(geom,1))) + ST_Z(ST_EndPoint(ST_GeometryN(geom,1))) ) / 2.0;


-- Now the routing stuff, a project in itself!
-- Create a new table of the trails for routing purposes:  routing_trails
-- * Verified bug in PostGIS 2.0, multilinestring doesn't work with ST_StartPoint() and ST_EndPoint()
-- * Besides, these multilines in fact have 1 component: a single linestring, so it doesn't even make sense that they're multis
-- * Clip the the multiline segments WHICH ARE NOT BRIDGES to 100-foot segments, but leave the bridge=above segments whole.
--   The existing segments are so long that intersection nodes (A*, Dijkstra) are far from real-world destinations, so routing will badly overshoot the target.
-- * pgRouting demands that the geometry field be named the_geom, ours is not, so the routing_trails table uses the_geom.
-- * Side note: original loading method pulled each single linestring from cm_trails. This is now over 3,000,000 records. Don't do that!
-- Create and index a bunch of boolean columns for the Bike/Hike/Bridle/Road attributes.
-- * Turns out that IS NULL queries are much faster than bike='Yes' or even can_bike=true
-- Add the x1 x2 y1 y2 columns for A-Star routing.
-- Add the Cost and Reverse Cost fields.
-- Add the elevation field, for generating elevation profile charts.
-- Add the Lat Lng, etc. for zooming the map and figuring distance from GPS.
-- Add time estimates for traversing each segment, using Tobler's hiking function to define duration_hike, and then multipliers for bike and bridle
-- * The Tobler stuff can't be done in a single step, due to internal PostgreSQL issues causing underflows.
-- * Tobler's algorithm starts with the "6" and yields kilometers per hour, the 0.911344 multiplier is to get feet per second.
-- Keep the vertices_tmp table, so we can render the node points via GeoServer
-- A PL/PGSQL function which will update the "links" field in routing_trails, so we can later filter by nodes with 3+ links (intersections).
-- Lastly, create some views of the trails table, showing only hike, bike, bridle and subcategories thereof

DROP TABLE routing_trails CASCADE;
CREATE TABLE routing_trails (
    gid serial,
    name varchar(150),
    links integer,
    bridge     varchar(5),
    one_way    varchar(2),
    bike       varchar(3),
    bridle     varchar(3),
    hike       varchar(3),
    mtnbike    varchar(3),
    difficulty varchar(20),
    paved      varchar(3),
    pri_use    varchar(25),
    duration_hike    float,
    duration_bike    float,
    duration_bridle  float,
    primary key (gid)
);
SELECT addgeometrycolumn('','routing_trails','the_geom',3734, 'LINESTRING', 3);
CREATE INDEX routing_trails_the_geom ON routing_trails USING GIST (the_geom);

GRANT update ON routing_trails TO trails;

INSERT INTO routing_trails (name, bridge, difficulty, bike, mtnbike, bridle, hike, paved, pri_use, one_way, the_geom)
    SELECT label_name AS name, bridge, skill_cm AS difficulty, bike, mtnbike, bridle, hike, paved, pri_use, one_way, ST_GeometryN(geom,1)
    FROM cm_trails
    WHERE bridge IS NOT NULL;

INSERT INTO routing_trails (name, bridge, difficulty, bike, mtnbike, bridle, hike, paved, pri_use, one_way, the_geom)
    SELECT name, bridge, difficulty, bike, mtnbike, bridle, hike, paved, pri_use, one_way, 
        ST_Line_Substring(t.geometry, 100.0*n/length,
        CASE
        WHEN 100.0*(n+1) < length THEN 100.0*(n+1)/length
        ELSE 1
        END) AS geometry
FROM
   (SELECT label_name AS name, bridge, skill_cm AS difficulty, bike, mtnbike, bridle, hike, paved, pri_use, one_way, 
    length,
    ST_GeometryN(geom,1) AS geometry
    FROM cm_trails
    WHERE bridge IS NULL
    ) t
CROSS JOIN generate_series(0,1000) n
WHERE n*100.00/length < 1;

ALTER TABLE routing_trails ADD COLUMN closed boolean;
CREATE INDEX routing_trails_idx_closed on routing_trails (closed);

ALTER TABLE routing_trails ADD COLUMN is_road boolean;
ALTER TABLE routing_trails ADD COLUMN no_hike boolean;
ALTER TABLE routing_trails ADD COLUMN no_bike boolean;
ALTER TABLE routing_trails ADD COLUMN no_bridle boolean;
ALTER TABLE routing_trails ADD COLUMN no_paved   boolean;
ALTER TABLE routing_trails ADD COLUMN no_unpaved boolean;
UPDATE routing_trails SET is_road=true    WHERE pri_use='Road';
UPDATE routing_trails SET no_hike=true    WHERE hike != 'Yes';
UPDATE routing_trails SET no_bike=true    WHERE bike != 'Yes';
UPDATE routing_trails SET no_bridle=true  WHERE bridle != 'Yes';
UPDATE routing_trails SET no_paved=false   WHERE paved='Yes';
UPDATE routing_trails SET no_unpaved=false WHERE paved='No';
CREATE INDEX routing_trails_idx_is_road    on routing_trails (is_road);
CREATE INDEX routing_trails_idx_no_hike    on routing_trails (no_hike);
CREATE INDEX routing_trails_idx_no_bike    on routing_trails (no_bike);
CREATE INDEX routing_trails_idx_no_bridle  on routing_trails (no_bridle);
CREATE INDEX routing_trails_idx_no_paved   on routing_trails (no_paved);
CREATE INDEX routing_trails_idx_no_unpaved on routing_trails (no_unpaved);

ALTER TABLE routing_trails ADD COLUMN x FLOAT;
ALTER TABLE routing_trails ADD COLUMN y FLOAT;
ALTER TABLE routing_trails ADD COLUMN lat FLOAT;
ALTER TABLE routing_trails ADD COLUMN lng FLOAT;
UPDATE routing_trails SET x=ST_X(ST_CENTROID(the_geom));
UPDATE routing_trails SET y=ST_Y(ST_CENTROID(the_geom));
UPDATE routing_trails SET lng=ST_X(ST_CENTROID(ST_TRANSFORM(the_geom,4326)));
UPDATE routing_trails SET lat=ST_Y(ST_CENTROID(ST_TRANSFORM(the_geom,4326)));

ALTER TABLE routing_trails ADD COLUMN x1 float;
ALTER TABLE routing_trails ADD COLUMN y1 float;
ALTER TABLE routing_trails ADD COLUMN x2 float;
ALTER TABLE routing_trails ADD COLUMN y2 float;
UPDATE routing_trails SET x1 = ST_X(ST_StartPoint(the_geom));
UPDATE routing_trails SET y1 = ST_Y(ST_StartPoint(the_geom));
UPDATE routing_trails SET x2 = ST_X(ST_EndPoint(the_geom));
UPDATE routing_trails SET y2 = ST_Y(ST_EndPoint(the_geom));

ALTER TABLE routing_trails ADD COLUMN length float;
ALTER TABLE routing_trails ADD COLUMN reverse_cost double precision;
UPDATE routing_trails SET length=ST_Length(the_geom);

ALTER TABLE routing_trails ADD COLUMN cost_hike double precision;
UPDATE routing_trails SET cost_hike=length * 2.0 WHERE pri_use='All Purpose Trail';
UPDATE routing_trails SET cost_hike=length * 3.0 WHERE paved='Yes';
UPDATE routing_trails SET cost_hike=length * 6.0 WHERE pri_use='Road';
UPDATE routing_trails SET cost_hike=length WHERE cost_hike IS NULL;

ALTER TABLE routing_trails ADD COLUMN cost_bike double precision;
UPDATE routing_trails SET cost_bike=length * 3 WHERE pri_use!='All Purpose Trail' AND pri_use!='Mountain Bike Trail';
UPDATE routing_trails SET cost_bike=length * 6.0 WHERE pri_use='Road';
UPDATE routing_trails SET cost_bike=length * 6.0 WHERE pri_use='Road Crossing';
UPDATE routing_trails SET cost_bike=length * 6.0 WHERE pri_use='Parking';
UPDATE routing_trails SET cost_bike=length WHERE cost_bike IS NULL;

ALTER TABLE routing_trails ADD COLUMN cost_bridle double precision;
UPDATE routing_trails SET cost_bridle=length * 3 WHERE pri_use!='Bridle';
UPDATE routing_trails SET cost_bridle=length * 6.0 WHERE pri_use='Road';
UPDATE routing_trails SET cost_bridle=length WHERE cost_bridle IS NULL;

UPDATE routing_trails SET cost_hike=999999999   WHERE one_way='FT';
UPDATE routing_trails SET cost_bike=999999999   WHERE one_way='FT';
UPDATE routing_trails SET cost_bridle=999999999 WHERE one_way='FT';
UPDATE routing_trails SET reverse_cost=length;
UPDATE routing_trails SET reverse_cost=999999999 WHERE one_way='TF';

ALTER TABLE routing_trails ADD COLUMN elevation integer;
UPDATE routing_trails SET elevation=ROUND( ST_Z(ST_StartPoint(the_geom)) + ST_Z(ST_EndPoint(the_geom)) ) / 2.0;

ALTER TABLE routing_trails ADD COLUMN tobler_fps FLOAT;
UPDATE routing_trails SET tobler_fps = 0.911344 * 6 * EXP(-3.5 * ABS( (ST_Z(ST_StartPoint(the_geom)) - ST_Z(ST_EndPoint(the_geom)))/length ) );
UPDATE routing_trails SET duration_hike   = length / tobler_fps;
UPDATE routing_trails SET duration_bike   = duration_hike * 0.33;
UPDATE routing_trails SET duration_bridle = duration_hike * 0.80;

ALTER TABLE routing_trails ADD COLUMN "source" integer;
ALTER TABLE routing_trails ADD COLUMN "target" integer;
CREATE INDEX routing_trails_source ON routing_trails ("source");
CREATE INDEX routing_trails_target ON routing_trails ("target");

DROP TABLE IF EXISTS vertices_tmp;
UPDATE routing_trails SET "source"=null;
UPDATE routing_trails SET "target"=null;
SELECT assign_vertex_id('routing_trails', 9, 'the_geom', 'gid');
ANALYZE routing_trails;

ALTER TABLE vertices_tmp ADD COLUMN links integer;
UPDATE vertices_tmp SET links=0;
UPDATE vertices_tmp SET links=vertices_tmp.links+1 FROM routing_trails WHERE routing_trails.source=vertices_tmp.id;
UPDATE vertices_tmp SET links=vertices_tmp.links+1 FROM routing_trails WHERE routing_trails.target=vertices_tmp.id;

SELECT update_routing_trails_link_count();

SELECT update_trail_closures();

CREATE OR REPLACE VIEW routing_trails_hike                       AS SELECT *, cost_hike AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle                     AS SELECT *, cost_bridle AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike                       AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL;
CREATE OR REPLACE VIEW routing_trails_hike_paved                 AS SELECT *, cost_hike AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_hike_unpaved               AS SELECT *, cost_hike AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_paved               AS SELECT *, cost_bridle AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_unpaved             AS SELECT *, cost_bridle AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice                AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice');
CREATE OR REPLACE VIEW routing_trails_bike_beginner              AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner');
CREATE OR REPLACE VIEW routing_trails_bike_intermediate          AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced';
CREATE OR REPLACE VIEW routing_trails_bike_advanced              AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_paved          AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice') and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_beginner_paved        AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner') and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_paved    AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced' and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_advanced_paved        AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_unpaved        AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice') and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_beginner_unpaved      AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner') and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_unpaved  AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced' and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_advanced_unpaved      AS SELECT *, cost_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL and no_paved   IS NULL;

CREATE OR REPLACE VIEW routing_trails_hike_fastest                       AS SELECT *, duration_hike AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_fastest                     AS SELECT *, duration_bridle AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_fastest                       AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL;
CREATE OR REPLACE VIEW routing_trails_hike_paved_fastest                 AS SELECT *, duration_hike AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_hike_unpaved_fastest               AS SELECT *, duration_hike AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_paved_fastest               AS SELECT *, duration_bridle AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_unpaved_fastest             AS SELECT *, duration_bridle AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_fastest                AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice');
CREATE OR REPLACE VIEW routing_trails_bike_beginner_fastest              AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner');
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_fastest          AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced';
CREATE OR REPLACE VIEW routing_trails_bike_advanced_fastest              AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_paved_fastest          AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice') and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_beginner_paved_fastest        AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner') and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_paved_fastest    AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced' and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_advanced_paved_fastest        AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_unpaved_fastest        AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice') and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_beginner_unpaved_fastest      AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner') and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_unpaved_fastest  AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced' and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_advanced_unpaved_fastest      AS SELECT *, duration_bike AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL and no_paved   IS NULL;

CREATE OR REPLACE VIEW routing_trails_hike_shortest                       AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_shortest                     AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_shortest                       AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL;
CREATE OR REPLACE VIEW routing_trails_hike_paved_shortest                 AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_hike_unpaved_shortest               AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_hike IS NULL and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_paved_shortest               AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bridle_unpaved_shortest             AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bridle IS NULL and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_shortest                AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice');
CREATE OR REPLACE VIEW routing_trails_bike_beginner_shortest              AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner');
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_shortest          AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced';
CREATE OR REPLACE VIEW routing_trails_bike_advanced_shortest              AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_paved_shortest          AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice') and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_beginner_paved_shortest        AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner') and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_paved_shortest    AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced' and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_advanced_paved_shortest        AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL and no_unpaved IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_novice_unpaved_shortest        AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice') and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_beginner_unpaved_shortest      AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty IN ('Novice','Beginner') and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_intermediate_unpaved_shortest  AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL AND difficulty != 'Advanced' and no_paved   IS NULL;
CREATE OR REPLACE VIEW routing_trails_bike_advanced_unpaved_shortest      AS SELECT *, length AS cost FROM routing_trails WHERE closed IS NULL AND no_bike IS NULL and no_paved   IS NULL;


-- And now that we have loaded new trails, purge the trails_fixed table which stores a nice list of Trails With Names
-- So we can list trails of mention, but not list every single irrelevant connecting or bridle trail
-- Load this from cm_trails using a PHP script which reads from a XLSX
-- This allows Cleveland Metworkparks to edit trails, and for us to regenerate this listing.

GRANT UPDATE ON trails_fixed TO trails;
-- do the import at http://maps.clemetparks.com/static/import/Aggregate_Trails.php
SELECT description FROM trails_fixed limit 3;
</pre>