server {
	listen 80 default_server;
	listen [::]:80 default_server;

	server_name
		maps-dev
		maps-dev.clevelandmetroparks.com
		10.0.0.23
		127.0.0.1;

	# Redirect all HTTP requests to HTTPS
	return 301 https://$host$request_uri;
}

map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}

server {
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;

	server_name
		maps-dev
		maps-dev.clevelandmetroparks.com
		10.0.0.23
		127.0.0.1;

	root /var/www;

	index index.html;

	add_header 'Access-Control-Allow-Origin' '*' always;
	add_header Content-Security-Policy "frame-ancestors https://*.clevelandmetroparks.com https://*.cmparks.net;" always;

	ssl_certificate /etc/ssl/certs/wc24-maps.pem;
	ssl_certificate_key /etc/ssl/private/wc24-maps.key;
	ssl_trusted_certificate /etc/ssl/certs/ov_chain.txt;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
	ssl_prefer_server_ciphers on;
	ssl_password_file /etc/ssl/private/cert-pass;

	location ~ /\.(?!well-known/) {
		deny all;
	}

	location /static/dist {
		add_header 'Access-Control-Allow-Origin' '*' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

		# Handle preflight (OPTIONS) requests
		if ($request_method = OPTIONS) {
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Length' 0;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			return 204;
		}
	}

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	location /admin {
		proxy_pass http://localhost:3000;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
	}
}
